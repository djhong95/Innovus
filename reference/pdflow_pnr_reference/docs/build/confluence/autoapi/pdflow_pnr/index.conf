<ac:structured-macro ac:name="note">
<ac:rich-text-body>
<p>This document is generated automatically. Do NOT change anythings in this page. All the changes will be ignored.</p>
</ac:rich-text-body>
</ac:structured-macro>
<h2>Table of Contents</h2>
<ul>
<li>
<p><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">id1</ac:parameter>
</ac:structured-macro>
<ac:link ac:anchor="ModuleContents">
<ac:link-body>Module Contents</ac:link-body>
</ac:link></p>
<ul>
<li>
<p><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">id2</ac:parameter>
</ac:structured-macro>
<ac:link ac:anchor="Functions">
<ac:link-body>Functions</ac:link-body>
</ac:link></p>
</li>
</ul>
</li>
</ul>
<h2><ac:link ac:anchor="id1">
<ac:link-body>Module Contents</ac:link-body>
</ac:link></h2>
<h3><ac:link ac:anchor="id2">
<ac:link-body>Functions</ac:link-body>
</ac:link></h3>
<table>
<tbody>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.get_lef_files">
<ac:link-body><code>get_lef_files</code></ac:link-body>
</ac:link>()</p>
</td>
<td><p>get a list of tech LEF and macro LEF used in design</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.get_prev_result_dir">
<ac:link-body><code>get_prev_result_dir</code></ac:link-body>
</ac:link>(stage)</p>
</td>
<td><p>get the result directory of the previous stage</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.get_prev_session_dir">
<ac:link-body><code>get_prev_session_dir</code></ac:link-body>
</ac:link>(stage, design_name = None)</p>
</td>
<td><p>get the session directory of the previous stage</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.get_prev_stage">
<ac:link-body><code>get_prev_stage</code></ac:link-body>
</ac:link>(stage)</p>
</td>
<td><p>get the name of the previous stage</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.get_result_dir">
<ac:link-body><code>get_result_dir</code></ac:link-body>
</ac:link>(stage)</p>
</td>
<td><p>get the result directory for the current stage</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.get_session_designs">
<ac:link-body><code>get_session_designs</code></ac:link-body>
</ac:link>(stage)</p>
</td>
<td><p>get a list of design names in the specified stage&apos;s session directory</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.get_session_dir">
<ac:link-body><code>get_session_dir</code></ac:link-body>
</ac:link>(stage, design_name = None)</p>
</td>
<td><p>get the session directory of the current stage</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.get_session_file">
<ac:link-body><code>get_session_file</code></ac:link-body>
</ac:link>(stage, design_name = None)</p>
</td>
<td><p>get the session file of the current stage</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.get_target_stages">
<ac:link-body><code>get_target_stages</code></ac:link-body>
</ac:link>(target_stage)</p>
</td>
<td><p>return list of stages need to perform to reach the target_stage</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.get_wirelength">
<ac:link-body><code>get_wirelength</code></ac:link-body>
</ac:link>(tcl, sort)</p>
</td>
<td><p></p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.innovus_end_commands">
<ac:link-body><code>innovus_end_commands</code></ac:link-body>
</ac:link>(tcl, save_design = True, design_name = None)</p>
</td>
<td><p>put ending commands in innovus tcl script</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.innovus_final_result_commands">
<ac:link-body><code>innovus_final_result_commands</code></ac:link-body>
</ac:link>(tcl, design_name = None)</p>
</td>
<td><p>put commands for producing final outputs in innovus tcl script</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.innovus_start_commands">
<ac:link-body><code>innovus_start_commands</code></ac:link-body>
</ac:link>(tcl, restore_design = True, design_name = None)</p>
</td>
<td><p>put start up commands in innovus tcl script</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.is_stage_done">
<ac:link-body><code>is_stage_done</code></ac:link-body>
</ac:link>(stage)</p>
</td>
<td><p>check whether the specified stage is already done or not</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.run_pnr">
<ac:link-body><code>run_pnr</code></ac:link-body>
</ac:link>(stage, tool, tool_version, clean_prevrun, run, interactive_design, log_tracer)</p>
</td>
<td><p>perform pnr of designs</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.write_cpf">
<ac:link-body><code>write_cpf</code></ac:link-body>
</ac:link>(filename)</p>
</td>
<td><p>write a cpf file (power intention file for Cadence tools only)</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.write_interactive">
<ac:link-body><code>write_interactive</code></ac:link-body>
</ac:link>(filename, interactive_design = None)</p>
</td>
<td><p>write a script for innovus interactive session</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.write_mmmc">
<ac:link-body><code>write_mmmc</code></ac:link-body>
</ac:link>(filename, lib_files_override = None, qx_tech_file_override = None, sdc_file_override = None)</p>
</td>
<td><p>write a mmmc file used in innnovus</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.write_options">
<ac:link-body><code>write_options</code></ac:link-body>
</ac:link>(filename, num_route_layer_override = None, lefdef2qrc_layermap_override = None)</p>
</td>
<td><p>write a file for basic options used in innovus</p>
</td>
</tr>
<tr>
<td><p><ac:link ac:anchor="pdflow_pnr.write_upf">
<ac:link-body><code>write_upf</code></ac:link-body>
</ac:link>(filename)</p>
</td>
<td><p>write a upf file (power intention file)</p>
</td>
</tr>
</tbody>
</table>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.get_lef_files</ac:parameter>
</ac:structured-macro>
<strong><code>get_lef_files</code></strong>()</dt>
<dd><p>get a list of tech LEF and macro LEF used in design</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>list of tech LEF and macro LEF files</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>flow_utils.List[str]</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.get_prev_result_dir</ac:parameter>
</ac:structured-macro>
<strong><code>get_prev_result_dir</code></strong>(<em><em>stage</em></em>)</dt>
<dd><p>get the result directory of the previous stage</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>stage</strong> (<em>str</em>) – current stage</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>if there is a previous stage, return the path to the session directory. if there is not, return None</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>flow_utils.Union[str, None]</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.get_prev_session_dir</ac:parameter>
</ac:structured-macro>
<strong><code>get_prev_session_dir</code></strong>(<em><em>stage</em></em>, <em><em>design_name</em>=None</em>)</dt>
<dd><p>get the session directory of the previous stage</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>stage</strong> (<em>str</em>) – current stage</p>
</li>
<li>
<p><strong>design_name</strong> (<em>str</em>) – the name of the design (if None, it will use FLOW_ENVS[‘BLOCK’])</p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>if there is a previous stage, return the path to the session directory. if there is not, return None</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>flow_utils.Union[str, None]</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.get_prev_stage</ac:parameter>
</ac:structured-macro>
<strong><code>get_prev_stage</code></strong>(<em><em>stage</em></em>)</dt>
<dd><p>get the name of the previous stage</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>stage</strong> (<em>str</em>) – current stage</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>if there is a previous stage, return the stage name. if there is not, return None</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>flow_utils.Union[str, None]</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.get_result_dir</ac:parameter>
</ac:structured-macro>
<strong><code>get_result_dir</code></strong>(<em><em>stage</em></em>)</dt>
<dd><p>get the result directory for the current stage</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>stage</strong> (<em>str</em>) – current stage</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>result directory for the current stage</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>flow_utils.Union[str, None]</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.get_session_designs</ac:parameter>
</ac:structured-macro>
<strong><code>get_session_designs</code></strong>(<em><em>stage</em></em>)</dt>
<dd><p>get a list of design names in the specified stage’s session directory</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>stage</strong> (<em>str</em>) – stage to find designs in the session directory</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>list of designs in the session directory of the specified stage</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>flow_utils.List[str]</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.get_session_dir</ac:parameter>
</ac:structured-macro>
<strong><code>get_session_dir</code></strong>(<em><em>stage</em></em>, <em><em>design_name</em>=None</em>)</dt>
<dd><p>get the session directory of the current stage</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>stage</strong> (<em>str</em>) – current stage</p>
</li>
<li>
<p><strong>design_name</strong> (<em>str</em>) – the name of the design (if None, it will use FLOW_ENVS[‘BLOCK’])</p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>session directory for the current stage</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>str</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.get_session_file</ac:parameter>
</ac:structured-macro>
<strong><code>get_session_file</code></strong>(<em><em>stage</em></em>, <em><em>design_name</em>=None</em>)</dt>
<dd><p>get the session file of the current stage</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>stage</strong> (<em>str</em>) – current stage</p>
</li>
<li>
<p><strong>design_name</strong> (<em>str</em>) – the name of the design (if None, it will use FLOW_ENVS[‘BLOCK’])</p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>session file for the current stage</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>str</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.get_target_stages</ac:parameter>
</ac:structured-macro>
<strong><code>get_target_stages</code></strong>(<em><em>target_stage</em></em>)</dt>
<dd><p>return list of stages need to perform to reach the target_stage</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>target_stage</strong> (<em>str</em>) – stage to run</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>list of stages need to perform to reach the target_stage</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>flow_utils.List[str]</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.get_wirelength</ac:parameter>
</ac:structured-macro>
<strong><code>get_wirelength</code></strong>(<em><em>tcl</em></em>, <em><em>sort</em></em>)</dt>
<dd><table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>tcl</strong> (<em>flow_tcl_utils.TclFile</em>) – </p>
</li>
<li>
<p><strong>sort</strong> (<em>str</em>) – </p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.innovus_end_commands</ac:parameter>
</ac:structured-macro>
<strong><code>innovus_end_commands</code></strong>(<em><em>tcl</em></em>, <em><em>save_design</em>=True</em>, <em><em>design_name</em>=None</em>)</dt>
<dd><p>put ending commands in innovus tcl script</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>tcl</strong> (<em>flow_tcl_utils.TclFile</em>) – innovus tcl script object</p>
</li>
<li>
<p><strong>save_design</strong> (<em>bool</em>) – if True, save the current session at the end</p>
</li>
<li>
<p><strong>design_name</strong> (<em>str</em>) – if this variable is not None, save the session to FLOW_ENVS[‘WORK_AREA’]/FLOW_ENVS[‘FLOW’]/FLOW_ENVS[‘STAGE’]/’sessions’/design_name.FLOW_ENVS[‘STAGE’].enc. Otherwise, FLOW_ENVS[‘WORK_AREA’]/FLOW_ENVS[‘FLOW’]/FLOW_ENVS[‘STAGE’]/’sessions’/FLOW_ENVS[‘BLOCK’].FLOW_ENVS[‘STAGE’].enc</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.innovus_final_result_commands</ac:parameter>
</ac:structured-macro>
<strong><code>innovus_final_result_commands</code></strong>(<em><em>tcl</em></em>, <em><em>design_name</em>=None</em>)</dt>
<dd><p>put commands for producing final outputs in innovus tcl script</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>tcl</strong> (<em>flow_tcl_utils.TclFile</em>) – innovus tcl script object</p>
</li>
<li>
<p><strong>design_name</strong> (<em>str</em>) – if this variable is not None, save the session to FLOW_ENVS[‘WORK_AREA’]/FLOW_ENVS[‘FLOW’]/FLOW_ENVS[‘STAGE’]/’sessions’/design_name.FLOW_ENVS[‘STAGE’].enc. Otherwise, FLOW_ENVS[‘WORK_AREA’]/FLOW_ENVS[‘FLOW’]/FLOW_ENVS[‘STAGE’]/’sessions’/FLOW_ENVS[‘BLOCK’].FLOW_ENVS[‘STAGE’].enc</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.innovus_start_commands</ac:parameter>
</ac:structured-macro>
<strong><code>innovus_start_commands</code></strong>(<em><em>tcl</em></em>, <em><em>restore_design</em>=True</em>, <em><em>design_name</em>=None</em>)</dt>
<dd><p>put start up commands in innovus tcl script</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>tcl</strong> (<em>flow_tcl_utils.TclFile</em>) – innovus tcl script object</p>
</li>
<li>
<p><strong>restore_design</strong> (<em>bool</em>) – if True, restore session from the previous stage</p>
</li>
<li>
<p><strong>design_name</strong> (<em>str</em>) – when restore from the previous stage, if this variable is not None, restore the session from FLOW_ENVS[‘WORK_AREA’]/FLOW_ENVS[‘FLOW’]/FLOW_ENVS[‘STAGE’](previous)/’sessions’/design_name.prev_stage.enc</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.is_stage_done</ac:parameter>
</ac:structured-macro>
<strong><code>is_stage_done</code></strong>(<em><em>stage</em></em>)</dt>
<dd><p>check whether the specified stage is already done or not</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>stage</strong> (<em>str</em>) – stage to check</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>True if the stage is done. Otherwise, False</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>bool</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.run_pnr</ac:parameter>
</ac:structured-macro>
<strong><code>run_pnr</code></strong>(<em><em>stage</em></em>, <em><em>tool</em></em>, <em><em>tool_version</em></em>, <em><em>clean_prevrun</em></em>, <em><em>run</em></em>, <em><em>interactive_design</em></em>, <em><em>log_tracer</em></em>)</dt>
<dd><p>perform pnr of designs</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>stage</strong> (<em>str</em>) – pnr stage to perform. it will perform all the stages prior to the specified stage if required. if not specified, it will perform all the stages.</p>
</li>
<li>
<p><strong>tool</strong> (<em>str</em>) – tool to use for pnr</p>
</li>
<li>
<p><strong>tool_version</strong> (<em>str</em>) – tool version to use for pnr. e.g.: 19.11</p>
</li>
<li>
<p><strong>clean_prevrun</strong> (<em>bool</em>) – delete existing run</p>
</li>
<li>
<p><strong>run</strong> (<em>str</em>) – phase to run the flow</p>
</li>
<li>
<p><strong>interactive_design</strong> (<em>str</em>) – choose design to open in interactive run (if not given, it will open the main design)</p>
</li>
<li>
<p><strong>log_tracer</strong> (<em>flow_log_utils.CustomStreamHandler</em>) – logging.CustomStreamHandler to manage warning/errors</p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>0 if pnr is completed successfully. Otherwise, 1</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>int</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.write_cpf</ac:parameter>
</ac:structured-macro>
<strong><code>write_cpf</code></strong>(<em><em>filename</em></em>)</dt>
<dd><p>write a cpf file (power intention file for Cadence tools only)</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>filename</strong> (<em>str</em>) – path to cpf file</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>0 if script is generated successfully. Otherwise, 1</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>int</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.write_interactive</ac:parameter>
</ac:structured-macro>
<strong><code>write_interactive</code></strong>(<em><em>filename</em></em>, <em><em>interactive_design</em>=None</em>)</dt>
<dd><p>write a script for innovus interactive session</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>filename</strong> (<em>str</em>) – path to interactive session script</p>
</li>
<li>
<p><strong>interactive_design</strong> (<em>str</em>) – name of the design for interactive session</p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>0 if script is generated successfully. Otherwise, 1</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>int</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.write_mmmc</ac:parameter>
</ac:structured-macro>
<strong><code>write_mmmc</code></strong>(<em><em>filename</em></em>, <em><em>lib_files_override</em>=None</em>, <em><em>qx_tech_file_override</em>=None</em>, <em><em>sdc_file_override</em>=None</em>)</dt>
<dd><p>write a mmmc file used in innnovus</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>filename</strong> (<em>str</em>) – path to mmmc file</p>
</li>
<li>
<p><strong>lib_files_override</strong> (<em>flow_utils.Dict</em><em>[</em><em>str</em><em>, </em><em>flow_utils.List</em><em>[</em><em>str</em><em>]</em><em>]</em>) – if you want to use your own lib files instead of the defaults set in technology, use this. {corner_name: [list of lib files]}</p>
</li>
<li>
<p><strong>qx_tech_file_override</strong> (<em>flow_utils.Dict</em><em>[</em><em>str</em><em>, </em><em>str</em><em>]</em>) – if you want to use your own qrcTechFile instead of the default set in technology, use this. {corner_name: qrcTechFile}</p>
</li>
<li>
<p><strong>sdc_file_override</strong> (<em>str</em>) – if you want to use your own sdc file instead of the result from synthesis, use this. path to sdc file</p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>0 if script is generated successfully. Otherwise, 1</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>int</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.write_options</ac:parameter>
</ac:structured-macro>
<strong><code>write_options</code></strong>(<em><em>filename</em></em>, <em><em>num_route_layer_override</em>=None</em>, <em><em>lefdef2qrc_layermap_override</em>=None</em>)</dt>
<dd><p>write a file for basic options used in innovus</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>filename</strong> (<em>str</em>) – path to options file</p>
</li>
<li>
<p><strong>num_route_layer_override</strong> (<em>int</em>) – override number of routing layer used for the design</p>
</li>
<li>
<p><strong>lefdef2qrc_layermap_override</strong> (<em>str</em>) – override LEF/DEF to QRC layer mapping file</p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>0 if script is generated successfully. Otherwise, 1</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>int</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">pdflow_pnr.write_upf</ac:parameter>
</ac:structured-macro>
<strong><code>write_upf</code></strong>(<em><em>filename</em></em>)</dt>
<dd><p>write a upf file (power intention file)</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>filename</strong> (<em>str</em>) – path to upf file</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>0 if script is generated successfully. Otherwise, 1</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>int</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
