



// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!    THIS IS A TEMPORARY FILE GENERATED BY DEPERILFY      !!
// !!             DO NOT MODIFY DIRECTLY!                     !!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


`define SCAN_DELAY #2

module tbench();
   
   // Scan
   reg       scan_phi, scan_phi_bar, scan_data_in, scan_load_chip, scan_load_chain;
   wire      scan_data_out;

   //-----------------------------------------
   //  Scan Chain Registers and Tasks
   //-----------------------------------------

   // Scan Registers and Initializations
   
`define SCAN_CHAIN_LENGTH 100

   reg [1-1:0] read_data_1;
   reg [1-1:0] read_data_1_read;
   initial read_data_1      = 1'd0;
   initial read_data_1_read = 1'd0;
   reg [2-1:0] read_data_2;
   reg [2-1:0] read_data_2_read;
   initial read_data_2      = 2'd0;
   initial read_data_2_read = 2'd0;
   reg [3-1:0] read_data_3;
   reg [3-1:0] read_data_3_read;
   initial read_data_3      = 3'd0;
   initial read_data_3_read = 3'd0;
   reg [2-1:0] read_data_array_addr;
   reg [4-1:0] read_data_array_data;
   reg [4-1:0] read_data_array_data_read;
   initial read_data_array_addr      = 2'd0;
   initial read_data_array_data      = 4'd0;
   initial read_data_array_data_read = 4'd0;
   reg [1-1:0] memory_load_mode;
   reg [1-1:0] memory_load_mode_read;
   initial memory_load_mode      = 1'd0;
   initial memory_load_mode_read = 1'd0;
   reg [9-1:0] addr;
   reg [9-1:0] addr_read;
   initial addr      = 9'd0;
   initial addr_read = 9'd0;
   reg [32-1:0] input_data;
   reg [32-1:0] input_data_read;
   initial input_data      = 32'd0;
   initial input_data_read = 32'd0;
   reg [32-1:0] output_data;
   reg [32-1:0] output_data_read;
   initial output_data      = 32'd0;
   initial output_data_read = 32'd0;
   reg [1-1:0] w1_r0;
   reg [1-1:0] w1_r0_read;
   initial w1_r0      = 1'd0;
   initial w1_r0_read = 1'd0;
   reg [1-1:0] write_data_1;
   reg [1-1:0] write_data_1_read;
   initial write_data_1      = 1'd0;
   initial write_data_1_read = 1'd0;
   reg [2-1:0] write_data_2;
   reg [2-1:0] write_data_2_read;
   initial write_data_2      = 2'd0;
   initial write_data_2_read = 2'd0;
   reg [3-1:0] write_data_3;
   reg [3-1:0] write_data_3_read;
   initial write_data_3      = 3'd0;
   initial write_data_3_read = 3'd0;
   reg [2-1:0] write_data_array_addr;
   reg [4-1:0] write_data_array_data;
   reg [4-1:0] write_data_array_data_read;
   initial write_data_array_addr      = 2'd0;
   initial write_data_array_data      = 4'd0;
   initial write_data_array_data_read = 4'd0;
   reg [1-1:0] scan_reset;
   reg [1-1:0] scan_reset_read;
   initial scan_reset      = 1'd0;
   initial scan_reset_read = 1'd0;

   // Scan chain tasks
   
   task load_chip;
      begin
         `SCAN_DELAY scan_load_chip = 1;
         `SCAN_DELAY scan_load_chip = 0;
      end
   endtask

   task load_chain;
      begin
         `SCAN_DELAY scan_load_chain = 1;
         `SCAN_DELAY scan_phi = 1;
         `SCAN_DELAY scan_phi = 0;
         `SCAN_DELAY scan_phi_bar = 1;
         `SCAN_DELAY scan_phi_bar = 0;
         `SCAN_DELAY scan_load_chain = 0;
      end
   endtask

   task rotate_chain;
      
      integer i;
      
      reg [`SCAN_CHAIN_LENGTH-1:0] data_in;
      reg [`SCAN_CHAIN_LENGTH-1:0] data_out;
      
      begin
         data_in[0:0] = read_data_1;
         data_in[2:1] = read_data_2;
         data_in[5:3] = read_data_3;
         data_in[11:6] = {read_data_array_data, read_data_array_addr};
         data_in[12:12] = memory_load_mode;
         data_in[21:13] = addr;
         data_in[53:22] = input_data;
         data_in[85:54] = output_data;
         data_in[86:86] = w1_r0;
         data_in[87:87] = write_data_1;
         data_in[89:88] = write_data_2;
         data_in[92:90] = write_data_3;
         data_in[98:93] = {write_data_array_data, write_data_array_addr};
         data_in[99:99] = scan_reset;

         for (i = 0; i < `SCAN_CHAIN_LENGTH; i=i+1) begin
            scan_data_in = data_in[0];
            data_out     = {scan_data_out, data_out[`SCAN_CHAIN_LENGTH-1:1]};
            `SCAN_DELAY scan_phi = 1;
            `SCAN_DELAY scan_phi = 0;
            `SCAN_DELAY scan_phi_bar = 1;
            `SCAN_DELAY scan_phi_bar = 0;
            `SCAN_DELAY data_in = data_in >> 1;
         end

         read_data_1_read = data_out[0:0];
         read_data_2_read = data_out[2:1];
         read_data_3_read = data_out[5:3];
         read_data_array_data_read = data_out[11:8];
         memory_load_mode_read = data_out[12:12];
         addr_read = data_out[21:13];
         input_data_read = data_out[53:22];
         output_data_read = data_out[85:54];
         w1_r0_read = data_out[86:86];
         write_data_1_read = data_out[87:87];
         write_data_2_read = data_out[89:88];
         write_data_3_read = data_out[92:90];
         write_data_array_data_read = data_out[98:95];
         scan_reset_read = data_out[99:99];
      end
      
   endtask

   //-----------------------------------------
   //  Scan chain DUT
   //-----------------------------------------

   // We're going to use the name chip_iternal_<NAME> for the signals that would
   // normally be inside the chip that we're interacting with. We'll generate them
   // here

    reg  [1-1:0]  chip_internal_read_data_1;
    reg  [2-1:0]  chip_internal_read_data_2;
    reg  [3-1:0]  chip_internal_read_data_3;
    reg  [16-1:0]  chip_internal_read_data_array;
    wire [1-1:0]  chip_internal_memory_load_mode;
    wire [9-1:0]  chip_internal_addr;
    wire [32-1:0]  chip_internal_input_data;
    reg  [32-1:0]  chip_internal_output_data;
    wire [1-1:0]  chip_internal_w1_r0;
    wire [1-1:0]  chip_internal_write_data_1;
    wire [2-1:0]  chip_internal_write_data_2;
    wire [3-1:0]  chip_internal_write_data_3;
    wire [16-1:0]  chip_internal_write_data_array;
    wire [1-1:0]  chip_internal_scan_reset;

   scan scan_dut ( // Inputs & outputs to the chip
              .read_data_1(chip_internal_read_data_1),
              .read_data_2(chip_internal_read_data_2),
              .read_data_3(chip_internal_read_data_3),
              .read_data_array(chip_internal_read_data_array),
              .memory_load_mode(chip_internal_memory_load_mode),
              .addr(chip_internal_addr),
              .input_data(chip_internal_input_data),
              .output_data(chip_internal_output_data),
              .w1_r0(chip_internal_w1_r0),
              .write_data_1(chip_internal_write_data_1),
              .write_data_2(chip_internal_write_data_2),
              .write_data_3(chip_internal_write_data_3),
              .write_data_array(chip_internal_write_data_array),
              .scan_reset(chip_internal_scan_reset),
             
                   // To the pads
                   .scan_phi        (scan_phi),
                   .scan_phi_bar    (scan_phi_bar),
                   .scan_data_in    (scan_data_in),
                   .scan_data_out   (scan_data_out),
                   .scan_load_chip  (scan_load_chip),
                   .scan_load_chain (scan_load_chain)
                   );
      
   
   //-----------------------------------------
   //  Testbench
   //-----------------------------------------
   
   initial begin

      $dumpvars(0, tbench);
            
      $display("Starting scan chain test");
      
      scan_phi  = 0;
      scan_phi_bar = 0;
      scan_data_in = 0;
      scan_load_chip = 0;
      scan_load_chain = 0;  

      scan_reset = 1'b1;
      
      rotate_chain();      
      load_chip();

      // Make sure reset worked
      if (chip_internal_write_data_1 !== 1'd0 || 
          chip_internal_write_data_2 !== 2'd3 ||
          chip_internal_write_data_3 !== 3'd0 ||
          chip_internal_write_data_array !== 16'hAA55
          ) begin
         $display("RESET TEST FAILED");
         $finish;
      end else begin
        $display("RESET TEST PASSED");
      end
         
      // Write each variable
      scan_reset = 1'b0;
      
      write_data_1 = 1'd1;
      write_data_2 = 2'd2;
      write_data_3 = 3'd3;

      write_data_array_addr = 2'd2;
      write_data_array_data = 4'hB;

      rotate_chain();      
      load_chip();
      
      // Check that the chip sees the new variables
      if (chip_internal_write_data_1     !== 1'd1 ||
          chip_internal_write_data_2     !== 2'd2 ||
          chip_internal_write_data_3     !== 3'd3 ||
          chip_internal_write_data_array !== 16'hAB55) begin
         $display("TEST 1 FAILED");
         $display("%d %d %d %h", 
                  chip_internal_write_data_1,
                  chip_internal_write_data_2,
                  chip_internal_write_data_3,
                  chip_internal_write_data_array);
         $finish;
      end else
        $display("TEST 1 PASSED");
         
      // Set internal values to read out      
      chip_internal_read_data_1 = 1'd0;  // As if the chip had this value internally
      chip_internal_read_data_2 = 2'd3;
      chip_internal_read_data_3 = 3'd5;

      chip_internal_read_data_array = 16'hABCD;

      // Read all of the values for both writable and non-writable variables
      read_data_array_addr = 2'd1;
      
      rotate_chain();
      load_chain();
      rotate_chain();

      // Check to see that we read out all values properly
      if (write_data_1_read         !== 1'd1 ||
          write_data_2_read         !== 2'd2 ||
          write_data_3_read         !== 3'd3 ||
          read_data_1_read          !== 1'd0 ||
          read_data_2_read          !== 2'd3 ||
          read_data_3_read          !== 3'd5 ||
          read_data_array_data_read !== 4'hC) begin
         $display("TEST 2 FAILED");
         $display("%d %d %d %d %d %d %h", 
                  write_data_1_read,
                  write_data_2_read,
                  write_data_3_read,
                  read_data_1_read,
                  read_data_2_read,
                  read_data_3_read,
                  read_data_array_data_read);
         $finish;
      end else
        $display("TEST 2 PASSED");

      $finish;
   end

   //////////
   
endmodule // tbench

					  